/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ahebert' at '4/8/16 11:07 AM' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
  	// flatDir name:'ExternalJars', dirs:'./lib'
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    maven {
      url 'https://dl.bintray.com/cityzendata/maven'
    }
    
    maven {
      url 'https://dl.bintray.com/hbs/maven'
    }
        
    maven {
      url "http://nexus.bedatadriven.com/content/groups/public/"
    }
    
    maven {
      url "http://repo.opengeo.org/"
    }
        
    maven {
      url 'https://repository.apache.org/content/groups/public'
    }
    
    mavenCentral()
    
    mavenLocal()
    
    maven {
      url "http://maven.twttr.com"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'
	compile 'com.basho.riak:riak-client:2.0.5'
	compile 'io.warp10:warp10:1.0.1-165-g9c49c1f'
	
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    
    testCompile 'junit:junit:4.12'
}

task pack(type: Jar) {
        zip64 = true
        ext.warpSuffixName = null != System.getProperty('warp') ? System.getProperty('warp') : ""
        appendix = "${warpSuffixName}"

        manifest {
            attributes("Implementation-Title": "Riak ts function")
            attributes("Implementation-Version": "0.0.1")
        }

        from files(sourceSets.main.output.classesDir)
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it).matching {
                }
            }
        } {
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
            exclude 'about.html'
            exclude 'about_files/**'
            exclude 'plugin.properties'
            exclude 'jetty-dir.css'
        }
        with jar
}
